var Excel = require('excel4node');
const moment = require('moment');
let directory = appRoot + '/temp_file';
const response = require('../config/response');
const { isInt } = require('../helper/utils');
class ExportDataToXLS {
  constructor(props) {
    const { items = [], headerTrx = {}, title = '', res } = props;
    this.headerTrx = headerTrx;
    this.items = items;
    this.title = title;
    this.footer = null;
    this.fileName = `${title}.xlsx`;
    this.res = res;
  }

  generate = async (type = 'stream') => {
    var workbook = new Excel.Workbook({
      logLevel: 1,
      // dateFormat: "yyyy-mm-dd hh:mm:ss",
    });
    let _title = workbook.createStyle({
      font: {
        size: 16,
        bold: true,
      },
    });
    let _regular = workbook.createStyle({
      font: {
        size: 11,
      },
    });

    let _header = workbook.createStyle({
      font: {
        size: 11,
        bold: true,
      },
      fill: {
        type: 'pattern', // the only one implemented so far.
        patternType: 'solid', // most common.
        fgColor: '#a8a8a8', // you can add two extra characters to serve as alpha, i.e. '2172d7aa'.
        // bgColor: "#a8a8a8", // bgColor only applies on patternTypes other than solid.
      },
      border: {
        // ยง18.8.4 border (Border)
        left: {
          style: 'thin', //ยง18.18.3 ST_BorderStyle (Border Line Styles) ['none', 'thin', 'medium', 'dashed', 'dotted', 'thick', 'double', 'hair', 'mediumDashed', 'dashDot', 'mediumDashDot', 'dashDotDot', 'mediumDashDotDot', 'slantDashDot']
          color: '#000000', // HTML style hex value
        },
        right: {
          style: 'thin',
          color: '#000000',
        },
        top: {
          style: 'thin',
          color: '#000000',
        },
        bottom: {
          style: 'thin',
          color: '#000000',
        },
      },
    });

    // Add Worksheets to the workbook
    var worksheet = workbook.addWorksheet('Sheet 1');
    worksheet.cell(1, 1).string(this.title.toUpperCase()).style(_title);

    // worksheet.cell(3, 1).string('Filter By:').style(_regular);
    // worksheet.cell(3, 2).string(filterBy).style(_regular);

    // worksheet.cell(4, 1).string('Status:').style(_regular);
    // worksheet.cell(4, 2).string(filterStatus).style(_regular);

    // worksheet.cell(3, 4).string('Date Range:').style(_regular);

    // worksheet.cell(3, 5).string(filterDate).style(_regular);

    // worksheet.cell(4, 4).string('Keyword:').style(_regular);
    // worksheet.cell(4, 5).string(filterSeacrh).style(_regular);

    // worksheet.cell(6, 1).string('Generated by:').style(_regular);
    // worksheet.cell(6, 2).string(`${full_name}`).style(_regular);

    worksheet.cell(2, 1).string('Report Date:').style(_regular);
    let now = new Date();
    worksheet
      .cell(2, 2)
      .string(moment(now).format('YYYY-MM-DD HH:mm'))
      .style({ ..._regular });
    worksheet.row(3).freeze(); // Freezes the top four rows
    let i = 1;

    const keys = Object.keys(this.headerTrx);
    // const keys = Object.keys(Object.assign({}, ...data));
    for (const key of keys) {
      worksheet.cell(3, i).string(key).style(_header);
      i += 1;
    }
    let row = 4;
    for (const it of this.items) {

      let i = 1;
      for (const key of keys) {
        let isi = it[this.headerTrx[key]];
        console.log(key, isi);
        // Benerin timestamp (Ilanging timezone, semoga no bug)
        if (isi instanceof Date && !isNaN(isi)) {
          isi = isi.toISOString().slice(0, -1);
          isi = moment(isi).format('YYYY-MM-DD HH:mm');
        }

        if (isi || isInt(isi)) isi = isi.toString();
        else isi = '-';
        worksheet.cell(row, i).string(isi).style(_regular);
        i += 1;
      }
      row += 1;
    }
    await new Promise((resolve, reject) => {
      workbook.write(`${directory}/${this.fileName}`, function (err, stats) {
        return resolve(true);
      });
    });

    return response.responseFile({ fileName: this.fileName }, this.res);
  };
}

module.exports = {
  ExportDataToXLS,
};
